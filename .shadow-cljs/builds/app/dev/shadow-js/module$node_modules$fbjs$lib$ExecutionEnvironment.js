["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/ExecutionEnvironment.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$ExecutionEnvironment=function(global,require,module,exports){global=!(\"undefined\"===typeof window||!window.document||!window.document.createElement);module.exports={canUseDOM:global,canUseWorkers:\"undefined\"!==typeof Worker,canUseEventListeners:global&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:global&&!!window.screen,isInWorker:!global}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$ExecutionEnvironment\"] = function(global,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["canUseDOM","isInWorker","canUseViewport","canUseWorkers","canUseEventListeners"]],"~:compiled-at",1567957505000,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$ExecutionEnvironment.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAW1GC,MAAAA,CAAY,EAAqB,WAArB,GAAG,MAAOC,OAAV,EAAoCC,CAAAD,MAAAC,SAApC,EAAuDC,CAAAF,MAAAC,SAAAC,cAAvD,CAsBhBL,OAAAC,QAAA,CAd2BK,CAEzBJ,UAAWA,MAFcI,CAIzBC,cAAiC,WAAjCA,GAAe,MAAOC,OAJGF,CAMzBG,qBAAsBP,MAAtBO,EAAmC,EAAGC,CAAAP,MAAAO,iBAAH,EAA8BC,CAAAR,MAAAQ,YAA9B,CANVL,CAQzBM,eAAgBV,MAAhBU,EAA6B,CAAC,CAACT,MAAAU,OARNP,CAUzBQ,WAAY,CAACZ,MAVYI,CAnBmF;\",\n\"sources\":[\"node_modules/fbjs/lib/ExecutionEnvironment.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$ExecutionEnvironment\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\\n\\n/**\\n * Simple, lightweight module assisting with the detection and context of\\n * Worker. Helps avoid circular dependencies and allows code to reason about\\n * whether or not they are in a Worker, even if they never include the main\\n * `ReactWorker` dependency.\\n */\\nvar ExecutionEnvironment = {\\n\\n  canUseDOM: canUseDOM,\\n\\n  canUseWorkers: typeof Worker !== 'undefined',\\n\\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\\n\\n  canUseViewport: canUseDOM && !!window.screen,\\n\\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\\n\\n};\\n\\nmodule.exports = ExecutionEnvironment;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"canUseDOM\",\"window\",\"document\",\"createElement\",\"ExecutionEnvironment\",\"canUseWorkers\",\"Worker\",\"canUseEventListeners\",\"addEventListener\",\"attachEvent\",\"canUseViewport\",\"screen\",\"isInWorker\"]\n}\n"]